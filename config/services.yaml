# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    env(MONGODB_URL): ''
    env(MONGODB_DB): ''
    api_geo_url: '%env(API_GEO_URL)%'
    jaeger_collector_url: '%env(JAEGER_COLLECTOR_URL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    monolog.handler.elasticsearch.error:
      class: Monolog\Handler\ElasticsearchHandler
      arguments:
        $client: '@Elastic\Elasticsearch\Client'
        $options:
          index: symfony_logs_error
        $level: error
      tags: ['monolog.handler']

    Elastic\Elasticsearch\Client:
      factory: ['App\Factories\ElasticsearchClientFactory', 'create']

    App\Service\Tracing\JaegerTracerFactory:
      public: false

    # Explicitly declare the tracer service with a class type even though it's built by a factory.
    jaeger.tracer:
      class: OpenTelemetry\SDK\Trace\Tracer  # Use the concrete class if available; otherwise, use the interface for autowiring.
      factory: ['App\Factories\JaegerTracerFactory', 'createTracer']
      public: true
#      arguments:
#        $endpoint: '%jaeger_collector_url%'
      # Example of additional method calls on the tracer at compile time:
      #calls:
      #  - [setSomeOption, ['someValue']]

    App\Service\ProfileService:
      arguments:
          $cache: '@Symfony\Contracts\Cache\TagAwareCacheInterface'
          $profileRepository: '@App\Repository\ProfileRepository'
      public: false
      tags: [ 'app.traceable' ]

        # Decorated service registered as the alias for ProfileServiceInterface
    App\Service\ProfileServiceInterface:
       # alias: App\Decorator\TraceableProfileService
      factory: ['App\Factory\TraceDecoratorFactory', 'decorate']

    # The TraceableProfileService depends on the original service. We can use the decorator pattern.
    App\Decorator\TraceableProfileService:
        arguments:
            $decorated: '@App\Service\ProfileService'
            $logger: '@logger'

    App\EventSubscriber\ProfileEventSubscriber:
      arguments:
        $notificationService: '@App\Service\NotifyService'
      tags:
        - { name: 'kernel.event_subscriber' }

    App\Resolver\DtoArgumentResolver:
      tags: [ controller.argument_value_resolver ]

    App\EventListener\JsonExceptionListener:
      tags:
        - { name: kernel.event_listener, event: kernel.exception }

    OpenTelemetry\API\Trace\TracerInterface: '@jaeger.tracer'

